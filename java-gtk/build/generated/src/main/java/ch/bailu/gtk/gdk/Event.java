/* this file is machine generated */
package ch.bailu.gtk.gdk;

import javax.annotation.Nullable;
import javax.annotation.Nonnull;
import ch.bailu.gtk.type.Str;
import ch.bailu.gtk.type.PointerContainer;


/**
 * `GdkEvent`s are immutable data structures, created by GDK to
 * <br>represent windowing system events.
 * <br>
 * <br>In GTK applications the events are handled automatically by toplevel
 * <br>widgets and passed on to the event controllers of appropriate widgets,
 * <br>so using `GdkEvent` and its related API is rarely needed.
 * <p><a href="https://docs.gtk.org/gdk4/class.Event.html">https://docs.gtk.org/gdk4/class.Event.html</a></p>
*/
public class Event extends ch.bailu.gtk.type.Pointer {
    public static ch.bailu.gtk.lib.handler.ClassHandler getClassHandler() {
        return ch.bailu.gtk.lib.handler.ClassHandler.get(Event.class.getCanonicalName());
    }

    public Event(PointerContainer pointer) {
        super(pointer);
    }

    /**
     * Returns the device of an event.
     * @return a `GdkDevice`
    */
    public Device getDevice()  {
        return new Device(new PointerContainer(JnaEvent.INST().gdk_event_get_device(asCPointer())));
    }

    /**
     * Returns a `GdkDeviceTool` representing the tool that
     * <br>caused the event.
     * <br>
     * <br>If the was not generated by a device that supports
     * <br>different tools (such as a tablet), this function will
     * <br>return %NULL.
     * <br>
     * <br>Note: the `GdkDeviceTool` will be constant during
     * <br>the application lifetime, if settings must be stored
     * <br>persistently across runs, see [method&#64;Gdk.DeviceTool.get_serial].
     * @return The current device tool
    */
    public DeviceTool getDeviceTool()  {
        return new DeviceTool(new PointerContainer(JnaEvent.INST().gdk_event_get_device_tool(asCPointer())));
    }

    /**
     * Retrieves the display associated to the &#64;event.
     * @return a `GdkDisplay`
    */
    public Display getDisplay()  {
        return new Display(new PointerContainer(JnaEvent.INST().gdk_event_get_display(asCPointer())));
    }

    /**
     * Retuns the event sequence to which the event belongs.
     * <br>
     * <br>Related touch events are connected in a sequence. Other
     * <br>events typically don't have event sequence information.
     * @return the event sequence that the event belongs to
    */
    public EventSequence getEventSequence()  {
        return new EventSequence(new PointerContainer(JnaEvent.INST().gdk_event_get_event_sequence(asCPointer())));
    }

    /**
     * Retrieves the type of the event.
     * @return a `GdkEvent`Type
    */
    public int getEventType()  {
        return JnaEvent.INST().gdk_event_get_event_type(asCPointer());
    }

    /**
     * Returns the modifier state field of an event.
     * @return the modifier state of &#64;event
    */
    public int getModifierState()  {
        return JnaEvent.INST().gdk_event_get_modifier_state(asCPointer());
    }

    /**
     * Returns whether this event is an 'emulated' pointer event.
     * <br>
     * <br>Emulated pointer events typically originate from a touch events.
     * @return %TRUE if this event is emulated
    */
    public boolean getPointerEmulated()  {
        return JnaEvent.INST().gdk_event_get_pointer_emulated(asCPointer());
    }

    /**
     * Returns the seat that originated the event.
     * @return a `GdkSeat`.
    */
    public Seat getSeat()  {
        return new Seat(new PointerContainer(JnaEvent.INST().gdk_event_get_seat(asCPointer())));
    }

    /**
     * Extracts the surface associated with an event.
     * @return The `GdkSurface` associated with the event
    */
    public Surface getSurface()  {
        return new Surface(new PointerContainer(JnaEvent.INST().gdk_event_get_surface(asCPointer())));
    }

    /**
     * Returns the timestamp of &#64;event.
     * <br>
     * <br>Not all events have timestamps. In that case, this function
     * <br>returns %GDK_CURRENT_TIME.
     * @return timestamp field from &#64;event
    */
    public int getTime()  {
        return JnaEvent.INST().gdk_event_get_time(asCPointer());
    }

    /**
     * Increase the ref count of &#64;event.
     * @return &#64;event
    */
    public Event ref()  {
        return new Event(new PointerContainer(JnaEvent.INST().gdk_event_ref(asCPointer())));
    }

    /**
     * Returns whether a `GdkEvent` should trigger a context menu,
     * <br>according to platform conventions.
     * <br>
     * <br>The right mouse button typically triggers context menus.
     * <br>
     * <br>This function should always be used instead of simply checking for
     * <br>event-&gt;button == %GDK_BUTTON_SECONDARY.
     * @return %TRUE if the event should trigger a context menu.
    */
    public boolean triggersContextMenu()  {
        return JnaEvent.INST().gdk_event_triggers_context_menu(asCPointer());
    }

    /**
     * Decrease the ref count of &#64;event.
     * <br>
     * <br>If the last reference is dropped, the structure is freed.
    */
    public void unref()  {
        JnaEvent.INST().gdk_event_unref(asCPointer());
    }

    public static long getTypeID() { 
        return JnaEvent.INST().gdk_event_get_type(); 
    }
    
    public static long getParentTypeID() {
        return ch.bailu.gtk.gobject.Gobject.typeParent(getTypeID());
    }
    
    public static ch.bailu.gtk.type.gobject.TypeSystem.TypeSize getTypeSize() {
        return ch.bailu.gtk.type.gobject.TypeSystem.getTypeSize(getTypeID());
    }
    
    public static ch.bailu.gtk.type.gobject.TypeSystem.TypeSize getParentTypeSize() {
        return ch.bailu.gtk.type.gobject.TypeSystem.getTypeSize(getParentTypeID());
    }
    
    public static int getInstanceSize() {
        return getTypeSize().instanceSize;
    }

}

/*
class-type

[MethodModel:java-type-not-supported:getAngle:[ParameterModel:Supported:{G_::{c:gboolean}}:{j:boolean}]]
        [ParameterModel:Supported:{Gg:Event:{c:GdkEvent*}}:{j:long}]
        [ParameterModel:java-type-not-supported:{G_::{c:double*}}:{j:}]

[MethodModel:java-type-not-supported:java-type-not-supported:getCenter:[ParameterModel:Supported:{G_::{c:gboolean}}:{j:boolean}]]
        [ParameterModel:Supported:{Gg:Event:{c:GdkEvent*}}:{j:long}]
        [ParameterModel:java-type-not-supported:{G_::{c:double*}}:{j:}]
        [ParameterModel:java-type-not-supported:{G_::{c:double*}}:{j:}]

[MethodModel:java-type-not-supported:getDistance:[ParameterModel:Supported:{G_::{c:gboolean}}:{j:boolean}]]
        [ParameterModel:Supported:{Gg:Event:{c:GdkEvent*}}:{j:long}]
        [ParameterModel:java-type-not-supported:{G_::{c:double*}}:{j:}]

[MethodModel:java-type-not-supported:java-type-not-supported:getAxes:[ParameterModel:Supported:{G_::{c:gboolean}}:{j:boolean}]]
        [ParameterModel:java-type-not-supported:{G_::{c:double**}}:{j:}]
        [ParameterModel:java-type-not-supported:{G_::{c:guint*}}:{j:}]

[MethodModel:java-type-not-supported:getAxis:[ParameterModel:Supported:{G_::{c:gboolean}}:{j:boolean}]]
        [ParameterModel:Supported:{G_::{c:GdkAxisUse}}:{j:int}]
        [ParameterModel:java-type-not-supported:{G_::{c:double*}}:{j:}]

[MethodModel:cb-return-value-not-supported:java-type-not-supported:getHistory:[ParameterModel:java-type-not-supported:{G_::{c:GdkTimeCoord*}}:{j:}]]
        [ParameterModel:java-type-not-supported:{G_::{c:guint*}}:{j:}]

[MethodModel:java-type-not-supported:java-type-not-supported:getPosition:[ParameterModel:Supported:{G_::{c:gboolean}}:{j:boolean}]]
        [ParameterModel:java-type-not-supported:{G_::{c:double*}}:{j:}]
        [ParameterModel:java-type-not-supported:{G_::{c:double*}}:{j:}]
*/
