/* this file is machine generated */
package ch.bailu.gtk.gio;

import javax.annotation.Nullable;
import javax.annotation.Nonnull;
import ch.bailu.gtk.type.Str;
import ch.bailu.gtk.type.PointerContainer;


/**
 * 
 * <p><a href="https://docs.gtk.org/">https://docs.gtk.org/</a></p>
*/
public interface GioConstants {

    /**
     * The value returned by handlers of the signals generated by
     * <br>the `gdbus-codegen` tool to indicate that a method call has been
     * <br>handled by an implementation. It is equal to %TRUE, but using
     * <br>this macro is sometimes more readable.
     * <br>
     * <br>In code that needs to be backwards-compatible with older GLib,
     * <br>use %TRUE instead, often written like this:
     * <br>
     * <pre>
     *   g_dbus_method_invocation_return_error (invocation, ...);
     *   return TRUE;    // handled
     * </pre>
    */
    boolean DBUS_METHOD_INVOCATION_HANDLED = true;

    /**
     * The value returned by handlers of the signals generated by
     * <br>the `gdbus-codegen` tool to indicate that a method call has not been
     * <br>handled by an implementation. It is equal to %FALSE, but using
     * <br>this macro is sometimes more readable.
     * <br>
     * <br>In code that needs to be backwards-compatible with older GLib,
     * <br>use %FALSE instead.
    */
    boolean DBUS_METHOD_INVOCATION_UNHANDLED = false;

    /**
     * Extension point for debug control functionality.
     * <br>See [Extending GIO][extending-gio].
    */
    String DEBUG_CONTROLLER_EXTENSION_POINT_NAME = "gio-debug-controller";

    /**
     * Extension point for default handler to URI association. See
     * <br>[Extending GIO][extending-gio].
    */
    String DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME = "gio-desktop-app-info-lookup";

    /**
     * The string used to obtain a Unix device path with g_drive_get_identifier().
    */
    String DRIVE_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device";

    /**
     * A key in the &quot;access&quot; namespace for checking deletion privileges.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
     * <br>
     * <br>This attribute will be %TRUE if the user is able to delete the file.
    */
    String FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete";

    /**
     * A key in the &quot;access&quot; namespace for getting execution privileges.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
     * <br>
     * <br>This attribute will be %TRUE if the user is able to execute the file.
    */
    String FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute";

    /**
     * A key in the &quot;access&quot; namespace for getting read privileges.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
     * <br>
     * <br>This attribute will be %TRUE if the user is able to read the file.
    */
    String FILE_ATTRIBUTE_ACCESS_CAN_READ = "access::can-read";

    /**
     * A key in the &quot;access&quot; namespace for checking renaming privileges.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
     * <br>
     * <br>This attribute will be %TRUE if the user is able to rename the file.
    */
    String FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename";

    /**
     * A key in the &quot;access&quot; namespace for checking trashing privileges.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
     * <br>
     * <br>This attribute will be %TRUE if the user is able to move the file to
     * <br>the trash.
    */
    String FILE_ATTRIBUTE_ACCESS_CAN_TRASH = "access::can-trash";

    /**
     * A key in the &quot;access&quot; namespace for getting write privileges.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
     * <br>
     * <br>This attribute will be %TRUE if the user is able to write to the file.
    */
    String FILE_ATTRIBUTE_ACCESS_CAN_WRITE = "access::can-write";

    /**
     * A key in the &quot;dos&quot; namespace for checking if the file's archive flag
     * <br>is set.
     * <br>
     * <br>This attribute is %TRUE if the archive flag is set.
     * <br>
     * <br>This attribute is only available for DOS file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_DOS_IS_ARCHIVE = "dos::is-archive";

    /**
     * A key in the &quot;dos&quot; namespace for checking if the file is a NTFS mount point
     * <br>(a volume mount or a junction point).
     * <br>
     * <br>This attribute is %TRUE if file is a reparse point of type
     * <br>[IO_REPARSE_TAG_MOUNT_POINT](https://msdn.microsoft.com/en-us/library/dd541667.aspx).
     * <br>
     * <br>This attribute is only available for DOS file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT = "dos::is-mountpoint";

    /**
     * A key in the &quot;dos&quot; namespace for checking if the file's backup flag
     * <br>is set.
     * <br>
     * <br>This attribute is %TRUE if the backup flag is set.
     * <br>
     * <br>This attribute is only available for DOS file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_DOS_IS_SYSTEM = "dos::is-system";

    /**
     * A key in the &quot;dos&quot; namespace for getting the file NTFS reparse tag.
     * <br>
     * <br>This value is 0 for files that are not reparse points.
     * <br>
     * <br>See the [Reparse Tags](https://msdn.microsoft.com/en-us/library/dd541667.aspx)
     * <br>page for possible reparse tag values.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG = "dos::reparse-point-tag";

    /**
     * A key in the &quot;etag&quot; namespace for getting the value of the file's
     * <br>entity tag.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_ETAG_VALUE = "etag::value";

    /**
     * A key in the &quot;filesystem&quot; namespace for getting the number of bytes
     * <br>of free space left on the file system.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
    */
    String FILE_ATTRIBUTE_FILESYSTEM_FREE = "filesystem::free";

    /**
     * A key in the &quot;filesystem&quot; namespace for checking if the file system
     * <br>is read only.
     * <br>
     * <br>Is set to %TRUE if the file system is read only.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly";

    /**
     * A key in the &quot;filesystem&quot; namespace for checking if the file system
     * <br>is remote.
     * <br>
     * <br>Is set to %TRUE if the file system is remote.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_FILESYSTEM_REMOTE = "filesystem::remote";

    /**
     * A key in the &quot;filesystem&quot; namespace for getting the total size (in
     * <br>bytes) of the file system, used in g_file_query_filesystem_info().
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
    */
    String FILE_ATTRIBUTE_FILESYSTEM_SIZE = "filesystem::size";

    /**
     * A key in the &quot;filesystem&quot; namespace for getting the file system's type.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_FILESYSTEM_TYPE = "filesystem::type";

    /**
     * A key in the &quot;filesystem&quot; namespace for getting the number of bytes
     * <br>used by data on the file system.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
    */
    String FILE_ATTRIBUTE_FILESYSTEM_USED = "filesystem::used";

    /**
     * A key in the &quot;filesystem&quot; namespace for hinting a file manager
     * <br>application whether it should preview (e.g. thumbnail) files on the
     * <br>file system.
     * <br>
     * <br>The value for this key contain a &#35;GFilesystemPreviewType.
    */
    String FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview";

    /**
     * A key in the &quot;gvfs&quot; namespace that gets the name of the current
     * <br>GVFS backend in use.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_GVFS_BACKEND = "gvfs::backend";

    /**
     * A key in the &quot;id&quot; namespace for getting a file identifier.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
     * <br>
     * <br>An example use would be during listing files, to avoid recursive
     * <br>directory scanning.
    */
    String FILE_ATTRIBUTE_ID_FILE = "id::file";

    /**
     * A key in the &quot;id&quot; namespace for getting the file system identifier.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
     * <br>
     * <br>An example use would be during drag and drop to see if the source
     * <br>and target are on the same filesystem (default to move) or not (default
     * <br>to copy).
    */
    String FILE_ATTRIBUTE_ID_FILESYSTEM = "id::filesystem";

    /**
     * A key in the &quot;mountable&quot; namespace for checking if a file (of
     * <br>type G_FILE_TYPE_MOUNTABLE) can be ejected.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject";

    /**
     * A key in the &quot;mountable&quot; namespace for checking if a file (of
     * <br>type G_FILE_TYPE_MOUNTABLE) is mountable.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount";

    /**
     * A key in the &quot;mountable&quot; namespace for checking if a file (of
     * <br>type G_FILE_TYPE_MOUNTABLE) can be polled.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = "mountable::can-poll";

    /**
     * A key in the &quot;mountable&quot; namespace for checking if a file (of
     * <br>type G_FILE_TYPE_MOUNTABLE) can be started.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_CAN_START = "mountable::can-start";

    /**
     * A key in the &quot;mountable&quot; namespace for checking if a file (of
     * <br>type G_FILE_TYPE_MOUNTABLE) can be started degraded.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = "mountable::can-start-degraded";

    /**
     * A key in the &quot;mountable&quot; namespace for checking if a file (of
     * <br>type G_FILE_TYPE_MOUNTABLE) can be stopped.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = "mountable::can-stop";

    /**
     * A key in the &quot;mountable&quot; namespace for checking if a file (of
     * <br>type G_FILE_TYPE_MOUNTABLE)  is unmountable.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount";

    /**
     * A key in the &quot;mountable&quot; namespace for getting the HAL UDI for the mountable
     * <br>file.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi";

    /**
     * A key in the &quot;mountable&quot; namespace for checking if a file (of
     * <br>type G_FILE_TYPE_MOUNTABLE) is automatically polled for media.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = "mountable::is-media-check-automatic";

    /**
     * A key in the &quot;mountable&quot; namespace for getting the &#35;GDriveStartStopType.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = "mountable::start-stop-type";

    /**
     * A key in the &quot;mountable&quot; namespace for getting the unix device.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device";

    /**
     * A key in the &quot;mountable&quot; namespace for getting the unix device file.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = "mountable::unix-device-file";

    /**
     * A key in the &quot;owner&quot; namespace for getting the file owner's group.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_OWNER_GROUP = "owner::group";

    /**
     * A key in the &quot;owner&quot; namespace for getting the user name of the
     * <br>file's owner.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_OWNER_USER = "owner::user";

    /**
     * A key in the &quot;owner&quot; namespace for getting the real name of the
     * <br>user that owns the file.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_OWNER_USER_REAL = "owner::user-real";

    /**
     * A key in the &quot;preview&quot; namespace for getting a &#35;GIcon that can be
     * <br>used to get preview of the file.
     * <br>
     * <br>For example, it may be a low resolution thumbnail without metadata.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.
     * <br>
     * <br>The value for this key should contain a &#35;GIcon.
    */
    String FILE_ATTRIBUTE_PREVIEW_ICON = "preview::icon";

    /**
     * A key in the &quot;recent&quot; namespace for getting time, when the metadata for the
     * <br>file in `recent:///` was last changed.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_INT64.
    */
    String FILE_ATTRIBUTE_RECENT_MODIFIED = "recent::modified";

    /**
     * A key in the &quot;selinux&quot; namespace for getting the file's SELinux
     * <br>context.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
     * <br>
     * <br>Note that this attribute is only available if GLib has been built
     * <br>with SELinux support.
    */
    String FILE_ATTRIBUTE_SELINUX_CONTEXT = "selinux::context";

    /**
     * A key in the &quot;standard&quot; namespace for getting the amount of disk space
     * <br>that is consumed by the file (in bytes).
     * <br>
     * <br>This will generally be larger than the file size (due to block size
     * <br>overhead) but can occasionally be smaller (for example, for sparse files).
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
    */
    String FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = "standard::allocated-size";

    /**
     * A key in the &quot;standard&quot; namespace for getting the content type of the file.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
     * <br>
     * <br>The value for this key should contain a valid content type.
    */
    String FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type";

    /**
     * A key in the &quot;standard&quot; namespace for getting the copy name of the file.
     * <br>
     * <br>The copy name is an optional version of the name. If available it's always
     * <br>in UTF8, and corresponds directly to the original filename (only transcoded to
     * <br>UTF8). This is useful if you want to copy the file to another filesystem that
     * <br>might have a different encoding. If the filename is not a valid string in the
     * <br>encoding selected for the filesystem it is in then the copy name will not be set.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name";

    /**
     * A key in the &quot;standard&quot; namespace for getting the description of the file.
     * <br>
     * <br>The description is a utf8 string that describes the file, generally containing
     * <br>the filename, but can also contain further information. Example descriptions
     * <br>could be &quot;filename (on hostname)&quot; for a remote file or &quot;filename (in trash)&quot;
     * <br>for a file in the trash. This is useful for instance as the window title
     * <br>when displaying a directory or for a bookmarks menu.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description";

    /**
     * A key in the &quot;standard&quot; namespace for getting the display name of the file.
     * <br>
     * <br>A display name is guaranteed to be in UTF-8 and can thus be displayed in
     * <br>the UI. It is guaranteed to be set on every file.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name";

    /**
     * A key in the &quot;standard&quot; namespace for edit name of the file.
     * <br>
     * <br>An edit name is similar to the display name, but it is meant to be
     * <br>used when you want to rename the file in the UI. The display name
     * <br>might contain information you don't want in the new filename (such as
     * <br>&quot;(invalid unicode)&quot; if the filename was in an invalid encoding).
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name";

    /**
     * A key in the &quot;standard&quot; namespace for getting the fast content type.
     * <br>
     * <br>The fast content type isn't as reliable as the regular one, as it
     * <br>only uses the filename to guess it, but it is faster to calculate than the
     * <br>regular content type.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type";

    /**
     * A key in the &quot;standard&quot; namespace for getting the icon for the file.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.
     * <br>
     * <br>The value for this key should contain a &#35;GIcon.
    */
    String FILE_ATTRIBUTE_STANDARD_ICON = "standard::icon";

    /**
     * A key in the &quot;standard&quot; namespace for checking if a file is a backup file.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup";

    /**
     * A key in the &quot;standard&quot; namespace for checking if a file is hidden.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden";

    /**
     * A key in the &quot;standard&quot; namespace for checking if the file is a symlink.
     * <br>Typically the actual type is something else, if we followed the symlink
     * <br>to get the type.
     * <br>
     * <br>On Windows NTFS mountpoints are considered to be symlinks as well.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink";

    /**
     * A key in the &quot;standard&quot; namespace for checking if a file is virtual.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual";

    /**
     * A key in the &quot;standard&quot; namespace for checking if a file is
     * <br>volatile. This is meant for opaque, non-POSIX-like backends to
     * <br>indicate that the URI is not persistent. Applications should look
     * <br>at %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET for the persistent URI.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_STANDARD_IS_VOLATILE = "standard::is-volatile";

    /**
     * A key in the &quot;standard&quot; namespace for getting the name of the file.
     * <br>
     * <br>The name is the on-disk filename which may not be in any known encoding,
     * <br>and can thus not be generally displayed as is. It is guaranteed to be set on
     * <br>every file.
     * <br>
     * <br>Use %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME if you need to display the
     * <br>name in a user interface.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
    */
    String FILE_ATTRIBUTE_STANDARD_NAME = "standard::name";

    /**
     * A key in the &quot;standard&quot; namespace for getting the file's size (in bytes).
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
    */
    String FILE_ATTRIBUTE_STANDARD_SIZE = "standard::size";

    /**
     * A key in the &quot;standard&quot; namespace for setting the sort order of a file.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_INT32.
     * <br>
     * <br>An example use would be in file managers, which would use this key
     * <br>to set the order files are displayed. Files with smaller sort order
     * <br>should be sorted first, and files without sort order as if sort order
     * <br>was zero.
    */
    String FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order";

    /**
     * A key in the &quot;standard&quot; namespace for getting the symbolic icon for the file.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.
     * <br>
     * <br>The value for this key should contain a &#35;GIcon.
    */
    String FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = "standard::symbolic-icon";

    /**
     * A key in the &quot;standard&quot; namespace for getting the symlink target, if the file
     * <br>is a symlink.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
    */
    String FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target";

    /**
     * A key in the &quot;standard&quot; namespace for getting the target URI for the file, in
     * <br>the case of %G_FILE_TYPE_SHORTCUT or %G_FILE_TYPE_MOUNTABLE files.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri";

    /**
     * A key in the &quot;standard&quot; namespace for storing file types.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
     * <br>
     * <br>The value for this key should contain a &#35;GFileType.
    */
    String FILE_ATTRIBUTE_STANDARD_TYPE = "standard::type";

    /**
     * A key in the &quot;thumbnail&quot; namespace for checking if thumbnailing failed.
     * <br>
     * <br>This attribute is %TRUE if thumbnailing failed.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed";

    /**
     * A key in the &quot;thumbnail&quot; namespace for checking whether the thumbnail is outdated.
     * <br>
     * <br>This attribute is %TRUE if the thumbnail is up-to-date with the file it represents,
     * <br>and %FALSE if the file has been modified since the thumbnail was generated.
     * <br>
     * <br>If %G_FILE_ATTRIBUTE_THUMBNAILING_FAILED is %TRUE and this attribute is %FALSE,
     * <br>it indicates that thumbnailing may be attempted again and may succeed.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_THUMBNAIL_IS_VALID = "thumbnail::is-valid";

    /**
     * A key in the &quot;thumbnail&quot; namespace for getting the path to the thumbnail
     * <br>image.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
    */
    String FILE_ATTRIBUTE_THUMBNAIL_PATH = "thumbnail::path";

    /**
     * A key in the &quot;time&quot; namespace for getting the time the file was last
     * <br>accessed.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64, and
     * <br>contains the time since the file was last accessed, in seconds since the
     * <br>UNIX epoch.
    */
    String FILE_ATTRIBUTE_TIME_ACCESS = "time::access";

    /**
     * A key in the &quot;time&quot; namespace for getting the nanoseconds of the time
     * <br>the file was last accessed. This should be used in conjunction with
     * <br>&#35;G_FILE_ATTRIBUTE_TIME_ACCESS. Corresponding &#35;GFileAttributeType is
     * <br>%G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_TIME_ACCESS_NSEC = "time::access-nsec";

    /**
     * A key in the &quot;time&quot; namespace for getting the microseconds of the time
     * <br>the file was last accessed.
     * <br>
     * <br>This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_ACCESS.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_TIME_ACCESS_USEC = "time::access-usec";

    /**
     * A key in the &quot;time&quot; namespace for getting the time the file was last
     * <br>changed.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64,
     * <br>and contains the time since the file was last changed, in seconds since
     * <br>the UNIX epoch.
     * <br>
     * <br>This corresponds to the traditional UNIX ctime.
    */
    String FILE_ATTRIBUTE_TIME_CHANGED = "time::changed";

    /**
     * A key in the &quot;time&quot; namespace for getting the nanoseconds of the time
     * <br>the file was last changed. This should be used in conjunction with
     * <br>&#35;G_FILE_ATTRIBUTE_TIME_CHANGED. Corresponding &#35;GFileAttributeType is
     * <br>%G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_TIME_CHANGED_NSEC = "time::changed-nsec";

    /**
     * A key in the &quot;time&quot; namespace for getting the microseconds of the time
     * <br>the file was last changed.
     * <br>
     * <br>This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_CHANGED.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec";

    /**
     * A key in the &quot;time&quot; namespace for getting the time the file was created.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64,
     * <br>and contains the time since the file was created, in seconds since the UNIX
     * <br>epoch.
     * <br>
     * <br>This may correspond to Linux `stx_btime`, FreeBSD `st_birthtim`, NetBSD
     * <br>`st_birthtime` or NTFS `ctime`.
    */
    String FILE_ATTRIBUTE_TIME_CREATED = "time::created";

    /**
     * A key in the &quot;time&quot; namespace for getting the nanoseconds of the time
     * <br>the file was created. This should be used in conjunction with
     * <br>&#35;G_FILE_ATTRIBUTE_TIME_CREATED. Corresponding &#35;GFileAttributeType is
     * <br>%G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_TIME_CREATED_NSEC = "time::created-nsec";

    /**
     * A key in the &quot;time&quot; namespace for getting the microseconds of the time
     * <br>the file was created.
     * <br>
     * <br>This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_CREATED.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec";

    /**
     * A key in the &quot;time&quot; namespace for getting the time the file was last
     * <br>modified.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64, and
     * <br>contains the time since the file was modified, in seconds since the UNIX
     * <br>epoch.
    */
    String FILE_ATTRIBUTE_TIME_MODIFIED = "time::modified";

    /**
     * A key in the &quot;time&quot; namespace for getting the nanoseconds of the time
     * <br>the file was last modified. This should be used in conjunction with
     * <br>&#35;G_FILE_ATTRIBUTE_TIME_MODIFIED. Corresponding &#35;GFileAttributeType is
     * <br>%G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_TIME_MODIFIED_NSEC = "time::modified-nsec";

    /**
     * A key in the &quot;time&quot; namespace for getting the microseconds of the time
     * <br>the file was last modified.
     * <br>
     * <br>This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_MODIFIED.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec";

    /**
     * A key in the &quot;trash&quot; namespace for getting the deletion date and time
     * <br>of a file inside the `trash:///` folder.
     * <br>
     * <br>The format of the returned string is `YYYY-MM-DDThh:mm:ss`.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
    */
    String FILE_ATTRIBUTE_TRASH_DELETION_DATE = "trash::deletion-date";

    /**
     * A key in the &quot;trash&quot; namespace for getting the number of (toplevel) items
     * <br>that are present in the `trash:///` folder.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_TRASH_ITEM_COUNT = "trash::item-count";

    /**
     * A key in the &quot;trash&quot; namespace for getting the original path of a file
     * <br>inside the `trash:///` folder before it was trashed.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
    */
    String FILE_ATTRIBUTE_TRASH_ORIG_PATH = "trash::orig-path";

    /**
     * A key in the &quot;unix&quot; namespace for getting the number of blocks allocated
     * <br>for the file.
     * <br>
     * <br>This attribute is only available for UNIX file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
    */
    String FILE_ATTRIBUTE_UNIX_BLOCKS = "unix::blocks";

    /**
     * A key in the &quot;unix&quot; namespace for getting the block size for the file
     * <br>system.
     * <br>
     * <br>This attribute is only available for UNIX file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = "unix::block-size";

    /**
     * A key in the &quot;unix&quot; namespace for getting the device id of the device the
     * <br>file is located on (see stat() documentation).
     * <br>
     * <br>This attribute is only available for UNIX file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_UNIX_DEVICE = "unix::device";

    /**
     * A key in the &quot;unix&quot; namespace for getting the group ID for the file.
     * <br>
     * <br>This attribute is only available for UNIX file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_UNIX_GID = "unix::gid";

    /**
     * A key in the &quot;unix&quot; namespace for getting the inode of the file.
     * <br>
     * <br>This attribute is only available for UNIX file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
    */
    String FILE_ATTRIBUTE_UNIX_INODE = "unix::inode";

    /**
     * A key in the &quot;unix&quot; namespace for checking if the file represents a
     * <br>UNIX mount point.
     * <br>
     * <br>This attribute is %TRUE if the file is a UNIX mount point.
     * <br>
     * <br>Since 2.58, `/` is considered to be a mount point.
     * <br>
     * <br>This attribute is only available for UNIX file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
    */
    String FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint";

    /**
     * A key in the &quot;unix&quot; namespace for getting the mode of the file
     * <br>(e.g. whether the file is a regular file, symlink, etc).
     * <br>
     * <br>See the documentation for `lstat()`: this attribute is equivalent to
     * <br>the `st_mode` member of `struct stat`, and includes both the file type
     * <br>and permissions.
     * <br>
     * <br>This attribute is only available for UNIX file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_UNIX_MODE = "unix::mode";

    /**
     * A key in the &quot;unix&quot; namespace for getting the number of hard links
     * <br>for a file.
     * <br>
     * <br>See the documentation for `lstat()`.
     * <br>
     * <br>This attribute is only available for UNIX file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_UNIX_NLINK = "unix::nlink";

    /**
     * A key in the &quot;unix&quot; namespace for getting the device ID for the file
     * <br>(if it is a special file).
     * <br>
     * <br>See the documentation for `lstat()`.
     * <br>
     * <br>This attribute is only available for UNIX file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_UNIX_RDEV = "unix::rdev";

    /**
     * A key in the &quot;unix&quot; namespace for getting the user ID for the file.
     * <br>
     * <br>This attribute is only available for UNIX file systems.
     * <br>
     * <br>Corresponding &#35;GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
    */
    String FILE_ATTRIBUTE_UNIX_UID = "unix::uid";

    /**
     * Extension point for memory usage monitoring functionality.
     * <br>See [Extending GIO][extending-gio].
    */
    String MEMORY_MONITOR_EXTENSION_POINT_NAME = "gio-memory-monitor";

    /**
     * The menu item attribute which holds the action name of the item.  Action
     * <br>names are namespaced with an identifier for the action group in which the
     * <br>action resides. For example, &quot;win.&quot; for window-specific actions and &quot;app.&quot;
     * <br>for application-wide actions.
     * <br>
     * <br>See also g_menu_model_get_item_attribute() and g_menu_item_set_attribute().
    */
    String MENU_ATTRIBUTE_ACTION = "action";

    /**
     * The menu item attribute that holds the namespace for all action names in
     * <br>menus that are linked from this item.
    */
    String MENU_ATTRIBUTE_ACTION_NAMESPACE = "action-namespace";

    /**
     * The menu item attribute which holds the icon of the item.
     * <br>
     * <br>The icon is stored in the format returned by g_icon_serialize().
     * <br>
     * <br>This attribute is intended only to represent 'noun' icons such as
     * <br>favicons for a webpage, or application icons.  It should not be used
     * <br>for 'verbs' (ie: stock icons).
    */
    String MENU_ATTRIBUTE_ICON = "icon";

    /**
     * The menu item attribute which holds the label of the item.
    */
    String MENU_ATTRIBUTE_LABEL = "label";

    /**
     * The menu item attribute which holds the target with which the item's action
     * <br>will be activated.
     * <br>
     * <br>See also g_menu_item_set_action_and_target()
    */
    String MENU_ATTRIBUTE_TARGET = "target";

    /**
     * The name of the link that associates a menu item with a section.  The linked
     * <br>menu will usually be shown in place of the menu item, using the item's label
     * <br>as a header.
     * <br>
     * <br>See also g_menu_item_set_link().
    */
    String MENU_LINK_SECTION = "section";

    /**
     * The name of the link that associates a menu item with a submenu.
     * <br>
     * <br>See also g_menu_item_set_link().
    */
    String MENU_LINK_SUBMENU = "submenu";

    /**
     * 
    */
    String NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor";

    /**
     * Extension point for network status monitoring functionality.
     * <br>See [Extending GIO][extending-gio].
    */
    String NETWORK_MONITOR_EXTENSION_POINT_NAME = "gio-network-monitor";

    /**
     * Extension point for power profile usage monitoring functionality.
     * <br>See [Extending GIO][extending-gio].
    */
    String POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME = "gio-power-profile-monitor";

    /**
     * Extension point for proxy functionality.
     * <br>See [Extending GIO][extending-gio].
    */
    String PROXY_EXTENSION_POINT_NAME = "gio-proxy";

    /**
     * Extension point for proxy resolving functionality.
     * <br>See [Extending GIO][extending-gio].
    */
    String PROXY_RESOLVER_EXTENSION_POINT_NAME = "gio-proxy-resolver";

    /**
     * Extension point for &#35;GSettingsBackend functionality.
    */
    String SETTINGS_BACKEND_EXTENSION_POINT_NAME = "gsettings-backend";

    /**
     * Extension point for TLS functionality via &#35;GTlsBackend.
     * <br>See [Extending GIO][extending-gio].
    */
    String TLS_BACKEND_EXTENSION_POINT_NAME = "gio-tls-backend";

    /**
     * The purpose used to verify the client certificate in a TLS connection.
     * <br>Used by TLS servers.
    */
    String TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = "1.3.6.1.5.5.7.3.2";

    /**
     * The purpose used to verify the server certificate in a TLS connection. This
     * <br>is the most common purpose in use. Used by TLS clients.
    */
    String TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = "1.3.6.1.5.5.7.3.1";

    /**
     * Extension point for &#35;GVfs functionality.
     * <br>See [Extending GIO][extending-gio].
    */
    String VFS_EXTENSION_POINT_NAME = "gio-vfs";

    /**
     * The string used to obtain the volume class with g_volume_get_identifier().
     * <br>
     * <br>Known volume classes include `device`, `network`, and `loop`. Other
     * <br>classes may be added in the future.
     * <br>
     * <br>This is intended to be used by applications to classify &#35;GVolume
     * <br>instances into different sections - for example a file manager or
     * <br>file chooser can use this information to show `network` volumes under
     * <br>a &quot;Network&quot; heading and `device` volumes under a &quot;Devices&quot; heading.
    */
    String VOLUME_IDENTIFIER_KIND_CLASS = "class";

    /**
     * The string used to obtain a Hal UDI with g_volume_get_identifier().
    */
    String VOLUME_IDENTIFIER_KIND_HAL_UDI = "hal-udi";

    /**
     * The string used to obtain a filesystem label with g_volume_get_identifier().
    */
    String VOLUME_IDENTIFIER_KIND_LABEL = "label";

    /**
     * The string used to obtain a NFS mount with g_volume_get_identifier().
    */
    String VOLUME_IDENTIFIER_KIND_NFS_MOUNT = "nfs-mount";

    /**
     * The string used to obtain a Unix device path with g_volume_get_identifier().
    */
    String VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device";

    /**
     * The string used to obtain a UUID with g_volume_get_identifier().
    */
    String VOLUME_IDENTIFIER_KIND_UUID = "uuid";

    /**
     * Extension point for volume monitor functionality.
     * <br>See [Extending GIO][extending-gio].
    */
    String VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor";

}

/*
enumeration-type
*/
