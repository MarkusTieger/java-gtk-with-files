import org.gradle.internal.jvm.Jvm

/*
 * There is currently no "C application" plugin, so this build uses the "C++ application" plugin and then reconfigures it
 * to build C instead.
 *
 * From:
 * https://github.com/vladsoroka/GradleJniSample
 */
plugins {
    id 'cpp-library'
}

ext {
    libraries = [
            '/usr/lib/x86_64-linux-gnu/libgtk-3.so',
            '/usr/lib/x86_64-linux-gnu/libgdk-3.so',
            '/usr/lib/x86_64-linux-gnu/libpangocairo-1.0.so',
            '/usr/lib/x86_64-linux-gnu/libpango-1.0.so',
            '/usr/lib/x86_64-linux-gnu/libharfbuzz.so',
            '/usr/lib/x86_64-linux-gnu/libatk-1.0.so',
            '/usr/lib/x86_64-linux-gnu/libcairo-gobject.so',
            '/usr/lib/x86_64-linux-gnu/libcairo.so',
            '/usr/lib/x86_64-linux-gnu/libgdk_pixbuf-2.0.so',
            '/usr/lib/x86_64-linux-gnu/libgio-2.0.so',
            '/usr/lib/x86_64-linux-gnu/libgobject-2.0.so',
            '/usr/lib/x86_64-linux-gnu/libglib-2.0.so'
    ]

    includes = [
            "-I/usr/include/glib-2.0",
            "-I/usr/include/gtk-3.0",
            "-I/usr/include/pango-1.0",
            '-I/usr/include/harfbuzz',
            '-I/usr/include/cairo',
            '-I/usr/include/gdk-pixbuf-2.0',
            '-I/usr/include/atk-1.0',
            '-I/usr/include/gio-unix-2.0',
            "-I/usr/lib/x86_64-linux-gnu/glib-2.0/include",
    ]
}

library {
    targetMachines = [
            machines.os('linux').architecture('x86-64'),
            machines.os('windows').architecture('x86-64'),
            machines.os('android').architecture('armv7')
    ]
    binaries.configureEach { CppBinary binary ->
        def compileTask = binary.compileTask.get()
        compileTask.includes.from("${Jvm.current().javaHome}/include")

        def osFamily = binary.targetPlatform.targetMachine.operatingSystemFamily
        if (osFamily.macOs) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/darwin")
        } else if (osFamily.linux) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/linux")
        } else if (osFamily.windows) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/win32")
        }

        compileTask.source.from fileTree(dir: "src/main/c", include: "**/*.c")
        compileTask.source.from fileTree(dir: "build/generated/src/main/c", include: "**/*.c")

        def toolChain = binary.toolChain
        if (toolChain instanceof VisualCpp) {
            compileTask.compilerArgs.addAll(["/TC"])
        } else if (toolChain instanceof GccCompatibleToolChain) {

            compileTask.compilerArgs.addAll(['-static', '-DPIC64', "-x", "c",
                                             "-I${project(":library").buildDir}/generated/sources/headers/java/main"
            ])
            compileTask.compilerArgs.addAll(project.ext.includes)

        }
    }
}


model {
    toolChains {
        gcc(Gcc) {
            eachPlatform {

                cppCompiler.withArguments { args ->
                    args << '-DPIC64'
                    args << '-static'
                }



                linker.withArguments { args ->
                    args << '-pthread'
                    args << '-lglib-2.0'
                    args << '-lz'
                    args << '/usr/lib/x86_64-linux-gnu/libgtk-3.so'
                    args << '/usr/lib/x86_64-linux-gnu/libgdk-3.so'
                    args << '/usr/lib/x86_64-linux-gnu/libpangocairo-1.0.so'
                    args << '/usr/lib/x86_64-linux-gnu/libpango-1.0.so'
                    args << '/usr/lib/x86_64-linux-gnu/libharfbuzz.so'
                    args << '/usr/lib/x86_64-linux-gnu/libatk-1.0.so'
                    args << '/usr/lib/x86_64-linux-gnu/libcairo-gobject.so'
                    args << '/usr/lib/x86_64-linux-gnu/libcairo.so'
                    args << '/usr/lib/x86_64-linux-gnu/libgdk_pixbuf-2.0.so'
                    args << '/usr/lib/x86_64-linux-gnu/libgio-2.0.so'
                    args << '/usr/lib/x86_64-linux-gnu/libgobject-2.0.so'
                    args << '/usr/lib/x86_64-linux-gnu/libglib-2.0.so'
                }
            }
        }
    }
    platforms {
        x64 {
            architecture "x86_64"
        }
    }
}


tasks.withType(CppCompile) {
    dependsOn ':library:compileJava'
}

