package ch.bailu.gtk.writer;

import java.io.IOException;
import java.io.Writer;

import ch.bailu.gtk.model.ClassModel;
import ch.bailu.gtk.model.MethodModel;
import ch.bailu.gtk.model.Model;
import ch.bailu.gtk.model.NameSpaceModel;
import ch.bailu.gtk.model.ParameterModel;
import ch.bailu.gtk.model.SignalModel;

public class JavaImpWriter extends CodeWriter {

    public JavaImpWriter(Writer writer) {
        super(writer);
    }

    @Override
    public void writeStart(ClassModel classModel, NameSpaceModel namespaceModel) throws IOException {
        writeAutoGenerated();
        a("package " + namespaceModel.getFullNamespace() + ";\n");
        end(3);
    }

    @Override
    public void writeClass(ClassModel classModel) throws IOException {
        start();
        a("class " + classModel.getImpName() + " {\n");
    }

    @Override
    public void writeInterface(ClassModel classModel) {}


    @Override
    public void writeUnsupported(Model m) throws IOException {
        start();
        a("    /* Unsupported:" + m.toString() + " */\n");
        end(1);
    }

    @Override
    public void writeInterfaceMethod(MethodModel m) {}


    @Override
    public void writeNativeMethod(ClassModel classModel, MethodModel m) throws IOException {
        start();
        a("    static native " + m.getReturnType().getImpType() + " " + m.getApiName());
        writeSignature(m);
        a(";\n");
        end(1);
    }

    @Override
    public void writeInternalConstructor(String className) {}

    @Override
    public void writeConstructor(ClassModel c, MethodModel m) {}

    @Override
    public void writeFactory(ClassModel c, MethodModel m) {}


    @Override
    public void writePrivateFactory(ClassModel c, MethodModel m) throws IOException {
        start();
        a("    static native long " + m.getApiName());
        writeFactorySignature(m);
        a(";\n");
        end(1);
    }

    @Override
    public void writeConstant(ParameterModel p) {}


    @Override
    public void writeEnd() throws IOException {
        a("}\n");
    }

    @Override
    public void writeSignal(SignalModel s) {}


    private void writeFactorySignature(MethodModel m) throws IOException {
        a("(");

        String del = " ";


        for (ParameterModel p: m.getParameters()) {
            a(del + p.getImpType() + " " + p.getName());
            del = ", ";
        }
        a(")");
    }

    private void writeSignature(MethodModel m) throws IOException {
        a("(");

        String del = ", ";

        a("long _self");
        for (ParameterModel p: m.getParameters()) {
            a(del + p.getImpType() + " " + p.getName());
        }
        a(")");
    }

}
