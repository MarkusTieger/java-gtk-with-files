package ch.bailu.gtk.writer;

import java.io.IOException;
import java.io.Writer;

import ch.bailu.gtk.model.ClassModel;
import ch.bailu.gtk.model.MethodModel;
import ch.bailu.gtk.model.Model;
import ch.bailu.gtk.model.NameSpaceModel;
import ch.bailu.gtk.model.ParameterModel;
import ch.bailu.gtk.model.SignalModel;

public class CWriter extends CodeWriter {


    public CWriter(Writer writer) {
        super(writer);
    }

    @Override
    public void writeStart(ClassModel classModel, NameSpaceModel namespace) throws IOException {
        writeAutoGenerated();

        a("#include <jni.h>\n\n");
        for (String include : namespace.getIncludes()) {
            a("#include <").a(include).a(">\n");
        }

        a("\n#include \"").a(classModel.getHeaderFileName()).a("\"\n");
        end(3);
    }


    @Override
    public void writeClass(ClassModel classModel) {}

    @Override
    public void writeInterface(ClassModel classModel)  {}

    @Override
    public void writeUnsupported(Model m) throws IOException {}

    @Override
    public void writeInterfaceMethod(MethodModel m) throws IOException {}

    @Override
    public void writeNativeMethod(ClassModel classModel, MethodModel m) throws IOException {
        writeNativeMethod(classModel, m, true);
    }

    private void writeFreeParameters(MethodModel m) throws IOException {
        for (ParameterModel p : m.getParameters()) {
            a(p.getFreeResourcesString());
        }
    }

    private void writeAllocateParameters(MethodModel m) throws IOException {
        for (ParameterModel p : m.getParameters()) {
            a(p.getAllocateResourceString());
        }

    }

    private void writeGtkCallSignature(MethodModel m, boolean self) throws IOException {
        String del = "";

        a("(");

        if (self) {
            a("(void*) _self");
            del = ",";
        }
        
        for (ParameterModel p : m.getParameters()) {
            a(del).a(p.getCallSignatureString());
            del = ",";
        }

        if (m.throwsError()) {
            a(del).a("NULL");
        }
        
        a(")");
    }

    private void writeJniSignature(MethodModel m, boolean self) throws IOException {
        String del = ", ";

        a("(").a("JNIEnv * _jenv, jclass _jself");

        if (self) {
            a(del).a("jlong _self");
        }
        for (ParameterModel p : m.getParameters()) {
            a(del).a(p.getJniType()).a(" ").a(p.getName());
            
        }
        a(")");
    }


    @Override
    public void writeInternalConstructor(String className) throws IOException {}

    @Override
    public void writeConstructor(ClassModel c, MethodModel m) throws IOException {}

    @Override
    public void writeFactory(ClassModel c, MethodModel m) throws IOException {
    }

    @Override
    public void writePrivateFactory(ClassModel c, MethodModel m) throws IOException {
        writeNativeMethod(c, m, false);
    }

    private void writeNativeMethod(ClassModel c, MethodModel m, boolean self) throws IOException {
        start(1);
        a("\nJNIEXPORT ").a(m.getReturnType().getJniType()).a(" JNICALL ").a(c.getJniMethodName(m));
        writeJniSignature(m, self);


        a(" {\n");
        writeAllocateParameters(m);
        a("\n");

        a("    ");
        if (!m.getReturnType().isVoid()) {


            if (m.getReturnType().isJavaNative()) {
                a("return (" + m.getReturnType().getJniType() + ") ");
            } else {
                a("return (jlong) ");
            }


        }
        a(m.getGtkName() + "");
        writeGtkCallSignature(m, self);
        a(";\n");
        writeFreeParameters(m);
        a("}\n");

    }

  

    @Override
    public void writeConstant(ParameterModel p) throws IOException {}

    @Override
    public void writeEnd() throws IOException {}

    @Override
    public void writeSignal(SignalModel s) throws IOException {}

}
