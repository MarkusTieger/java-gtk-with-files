package ch.bailu.gtk.writer


import ch.bailu.gtk.model.ClassModel;
import ch.bailu.gtk.model.MethodModel;
import ch.bailu.gtk.model.Model;
import ch.bailu.gtk.model.NameSpaceModel;
import ch.bailu.gtk.model.ParameterModel;

class JavaImpWriter extends CodeWriter {

    JavaImpWriter(Writer writer) {
        super(writer);
    }

    @Override
    void writeStart(ClassModel classModel, NameSpaceModel namespaceModel) throws IOException {
        writeAutoGenerated();
        a("package " + namespaceModel.getFullNamespace() + ";\n");
        end(3);
    }

    @Override
    void writeClass(ClassModel classModel) throws IOException {
        start();
        a("class " + classModel.getImpName() + " {\n");
    }

    @Override
    void writeInterface(ClassModel classModel) {}


    @Override
    void writeUnsupported(Model m) throws IOException {
        start();
        a("    /* Unsupported:" + m.toString() + " */\n");
        end(1);
    }

    @Override
    void writeInterfaceMethod(MethodModel m) {}


    @Override
    void writeNativeMethod(ClassModel classModel, MethodModel m) throws IOException {
        start();
        a("    static native " + m.getReturnType().getImpType() + " " + m.getApiName());
        writeSignature(m);
        a(";\n");
        end(1);
    }

    @Override
    public void writeInternalConstructor(String className) {}

    @Override
    public void writeConstructor(ClassModel c, MethodModel m) {}

    @Override
    public void writeFactory(ClassModel c, MethodModel m) {}


    @Override
    public void writePrivateFactory(ClassModel c, MethodModel m) throws IOException {
        start();
        a("    static native long " + m.getApiName());
        writeFactorySignature(m);
        a(";\n");
        end(1);
    }

    @Override
    public void writeConstant(ParameterModel p) {}


    @Override
    public void writeEnd() throws IOException {
        a("}\n");
    }

    @Override
    public void writeSignal(ClassModel c, MethodModel m) throws IOException {
        a("    static native void ").a(m.getSignalMethodName()).a("(long _self);\n");
        a("    static ").a(m.getReturnType().getImpType()).a(" ").a(m.getSignalCallbackName()); writeSignature(m); a(" {\n");
        a("        String signal = \"").a(m.getApiName()).a("\";\n");
        a("        for (java.lang.Object observer : ch.bailu.gtk.Signal.get(_self, signal)) {\n");
        a("            "); writeSignalInterfaceCall(c, m); a(";\n");
        a("        }\n");
        if (!m.getReturnType().isVoid()) {
            a("        return ").a(m.getReturnType().getImpDefaultConstant()); a(";\n");
        }
        a("    }\n")
    }

    private void writeSignalInterfaceCall(ClassModel c, MethodModel s) throws IOException {
        if (!s.getReturnType().isVoid()) {
            a("return ");
        }
        a("((").a(c.getApiName()).a(".").a(s.getSignalInterfaceName()).a(")observer).").a(s.getSignalMethodName());
        writeSignalInterfaceCallSignature(s);

        if (!s.getReturnType().isVoid() && !s.getReturnType().isJavaNative()) {
            a(".toLong()")
        }

    }

    private void writeSignalInterfaceCallSignature(MethodModel s) throws IOException {
        a("(");

        String del = " ";

        for (ParameterModel p: s.getParameters()) {
            a(del);
            if (p.isJavaNative()) {
                a(p.getName());
            } else {
                a("new ").a(p.getApiType()).a("(").a(p.getName()).a(")");
            }
            del = ", ";
        }
        a(")");

    }


    private void writeFactorySignature(MethodModel m) throws IOException {
        a("(");

        String del = " ";


        for (ParameterModel p: m.getParameters()) {
            a(del + p.getImpType() + " " + p.getName());
            del = ", ";
        }
        a(")");
    }

    private void writeSignature(MethodModel m) throws IOException {
        a("(");

        String del = ", ";

        a("long _self");
        for (ParameterModel p: m.getParameters()) {
            a(del + p.getImpType() + " " + p.getName());
        }
        a(")");
    }
}
